schema doc {

    field language type string {
        indexing: "en" | set_language
    }

    field gram_title type string {
        indexing: input title | index
        match {
            gram
            gram-size: 3
        }
    }

    field gram_content type string {
        indexing: input content | index
        match {
            gram
            gram-size: 3
        }
    }

    document doc {

        field path type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }

        field title type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }

        field author type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }

        field content type string {
            indexing: summary | index
            summary: dynamic
            index: enable-bm25
            stemming: best
        }

        field headers type array<string> {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }

        field keywords type array<string> {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }

        # e.g. open, cloud
        field namespace type string {
            indexing: summary | attribute
        }
        
        field html type string {}

        field outlinks type array<string> {
            indexing: summary | index
        }

        field inlinks type weightedset<string> {
            indexing: summary | attribute
        }

        field term_count type int {
            indexing: summary | attribute
        }

        field last_updated type int {
            indexing: summary | attribute
        }
        
    }

    fieldset default {
        fields: title, content, headers, path, keywords
    }

    fieldset grams {
        fields: gram_title, gram_content
    }

    rank-profile default inherits default {
        inputs {
            query(q_term_count) double: 0.0
            query(links) tensor<float>(links{})
        }
    }

    rank-profile documentation inherits default {
        inputs {
            query(titleWeight) double: 2.0
            query(headersWeight) double: 1.0
            query(contentWeight) double: 1.0
            query(keywordsWeight) double: 10.0
            query(pathWeight) double: 1.0
        }
        first-phase {
            expression {
                query(titleWeight) * bm25(title)
                + query(headersWeight) * bm25(headers)
                + query(contentWeight) * bm25(content)
                + query(keywordsWeight) * bm25(keywords)
                + query(pathWeight) * bm25(path)
            }
        }
        match-features {
            query(titleWeight)
            query(contentWeight)
            query(headersWeight)
            query(pathWeight)
            fieldMatch(title)
            fieldMatch(content)
            fieldMatch(content).matches
            fieldLength(title)
            fieldLength(content)
            bm25(title)
            bm25(content)
            bm25(headers)
            bm25(path)
            bm25(keywords)
        }
    }

    rank-profile weighted_doc_rank inherits default {
        rank-properties {
            query(titleWeight): 20.0
            query(contentWeight): 10.0
            query(gramTitleWeight): 2.0
            query(gramContentWeight): 1.0
        }
        first-phase {
            expression {
                query(titleWeight) * nativeRank(title)
                + query(contentWeight) * nativeRank(content)
                + query(gramTitleWeight) * nativeRank(gram_title)
                + query(gramContentWeight) * nativeRank(gram_content)
            }
        }
        summary-features {
            nativeRank(title)
            nativeRank(content)
            nativeRank(gram_title)
            nativeRank(gram_content)
        }
    }

    rank-profile inlinks {
        first-phase {
            expression: attribute(inlinks).count
        }
        summary-features {
            attribute(inlinks).count
        }
    }

    rank-profile inlinks_age {
        first-phase {
            expression: rank_score
        }
        summary-features {
            attribute(inlinks).count
            attribute(last_updated)
            now
            doc_age_seconds
            age_decay
            num_inlinks
            rank_score
        }
        constants {
            decay_const: 0.9
        }
        function doc_age_seconds() {
            expression: now - attribute(last_updated)
        }
        function age_decay() {
            expression: pow(decay_const, doc_age_seconds/3600)
        }
        function num_inlinks() {
            expression: attribute(inlinks).count
        }
        function rank_score() {
            expression: num_inlinks * age_decay
        }
    }

    rank-profile inlinks_twophase inherits inlinks_age {
        first-phase {
            keep-rank-count       : 50
            rank-score-drop-limit : 1000.0
            expression            : attribute(term_count)
        }
        second-phase {
            expression            : rank_score
        }
    }

    rank-profile term_count_similarity {
        first-phase {
            expression {
                1 -
                fabs(    attribute(term_count) - query(q_term_count) ) /
                    (1 + attribute(term_count) + query(q_term_count) )
            }
        }
        summary-features {
            attribute(term_count)
            query(q_term_count)
        }
    }

    rank-profile inlink_similarity inherits default {
        first-phase {
            expression: sum(tensorFromWeightedSet(attribute(inlinks), links) * query(links))
        }
        summary-features {
            query(links)
            tensorFromWeightedSet(attribute(inlinks), links)
        }
    }
}
