schema paragraph {

    field language type string {
        indexing: "en" | set_language
    }

    document paragraph {

        field path type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }
        
         field base_uri type string {
            indexing: summary
        }

        field doc_id type string {
            indexing: summary | attribute
        }

        field title type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }

        field authors type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }

        field content type string {
            indexing: summary | index
            index: enable-bm25
            stemming: best
        }
        
        field questions type array<string> {
            indexing: summary | index | attribute # Attribute for grouping
            index: enable-bm25
            stemming: best
        }
        
        field content_tokens type int {
            indexing: summary
        }

        # e.g. open, cloud
        field namespace type string {
            indexing: summary | attribute
        }

        field last_updated type int {
            indexing: summary | attribute
        }

        field selfhosted type bool {
            indexing: summary | attribute
        }
    }

    field questions_exact type array<string> {
        indexing: input questions | index
        match: word
    }

    field embedding type tensor<float>(x[384]) {
        indexing: (input title || "") . " " . (input content || "") | embed embedder | attribute
        attribute {
            distance-metric: angular
        }
    }

    field question_embedding type tensor<float>(q{}, x[384]) {
         # the query config to be moved to services.xml
         indexing {
            input questions |
                for_each { "query: " . _ } | embed embedder | attribute
         }

         attribute {
            distance-metric: angular
         }
    }

    document-summary short-summary {
        from-disk
        summary title {}
        summary content {}
        summary path {}
        summary doc_id {}
    }

    fieldset default {
        fields: title, content, path, questions, authors
    }

    rank-profile bm25 {
        first-phase {
            expression: bm25(title) + bm25(content) + bm25(path) + bm25(authors)
        }
    }

    rank-profile semantic inherits default {
        inputs {
            query(q) tensor<float>(x[384])
        }
        first-phase {
            expression: cos(distance(field,embedding))
        }
    }

    rank-profile hybrid inherits semantic {
        inputs {
            query(q) tensor<float>(x[384])
            query(sw) double: 0.6
            query(ew) double: 0.2
        }

        function semantic() {
            expression: cos(distance(field, embedding))
        }
        function semantic_question() {
            expression: max(cos(distance(field, question_embedding)), 0)
        }
        function keywords() {
            expression: (nativeRank(title) + nativeRank(content) + nativeRank(authors) + 0.5*nativeRank(path) + query(ew)*elementCompleteness(questions).completeness)/4 + elementCompleteness(questions_exact).completeness
        }
        first-phase {
            expression: query(sw)*(semantic_question + semantic) + (1 - query(sw))*keywords
        }
        match-features: keywords semantic semantic_question nativeRank(title) nativeRank(authors) nativeRank(content) nativeRank(path) elementCompleteness(questions).completeness elementCompleteness(questions_exact).completeness
    }

     rank-profile hybrid2 {
        inputs {
            query(q) tensor<float>(x[384])
            query(semantic_weight) double: 0.6
        }
        function scale(val) {
            expression: 2*atan(val/4)/(3.14159)
        }

        function scaled_bm25_content() {
            expression: scale(bm25(content))
        }

        function scaled_bm25_title() {
            expression: scale(bm25(title))
        }

        function scaled_bm25_path() {
            expression: scale(bm25(path))
        }

        function scaled_bm25_authors() {
            expression: scale(bm25(authors))
        }

        function combined_bm25() {
            expression: 0.3*scale(bm25(title)) + 0.6*scale(bm25(content)) + 0.1*scale(bm25(path)) + 0.3*scale(bm25(authors))
        }

         function semantic_content() {
            expression: cos(distance(field, embedding))
         }

         function semantic_question() {
            expression: max(cos(distance(field, question_embedding)),0)
         }

         function semantic_combined() {
            expression: 0.5*semantic_content + 0.5*semantic_question
         }

         function keywords() {
            expression: ( 0.8*combined_bm25  + 0.1*elementCompleteness(questions).completeness) + 0.1*elementCompleteness(questions_exact).completeness
         }

         first-phase {
            expression {
                query(semantic_weight)*semantic_combined + (1 - query(semantic_weight))*keywords
            }
            rank-score-drop-limit: 0.0
         }
         match-features {
            queryTermCount
            keywords
            bm25(title)
            scaled_bm25_title
            bm25(content)
            scaled_bm25_content
            bm25(path)
            scaled_bm25_path
            bm25(authors)
            scaled_bm25_authors
            combined_bm25
            semantic_question
            semantic_content
            semantic_combined
            elementCompleteness(questions).completeness
            elementCompleteness(questions_exact).completeness
         }
     }

     rank-profile hybrid3 inherits hybrid2 {
        global-phase {
            expression: reciprocal_rank(semantic_combined) + reciprocal_rank(keywords)
        }
     }
}
